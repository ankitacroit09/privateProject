minikube startsteps :

C:\WINDOWS\system32>cd D:\Hackathon
C:\WINDOWS\system32>d:







////////////////
Step 1	: Download exe :
			https://github.com/kubernetes/minikube
			
Step 2	: rename to  minikube.exe

Step 3	: set the envirnmnt variable (above)PATH: D:\Hackathon; 

			%JYTHON_HOME%;%PYTHON_HOME%\scripts;%PYTHON_HOME%;%JRE_HOME%\bin;%JAVA_HOME%\bin;%PATH%;;C:\Program Files (x86)\Microsoft VS Code\bin;D:\userdata\anksaxen\Application Data\npm;D:\Hackathon;

			D:\apps\Jython2.5.3;C:\Python27\scripts;C:\Python27;C:\Program Files\Java\jdk1.7.0_79\bin;C:\Program Files\Java\jdk1.7.0_79\bin;C:\ProgramData\Oracle\Java\javapath;C:\APPS\maven3\bin;C:\APPS\yourkit_10.0.6;C:\APPS\notepad++;C:\Program Files (x86)\RSA SecurID Token Common;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;C:\APPS\ant\bin;C:\APPS\xmlspy\XMLSpy2013;C:\APPS\7zip;C:\APPS\bc;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\WebEx\Productivity Tools;C:\Program Files\nodejs\;C:\Program Files (x86)\SafeCom\SafeComPrintClient;C:\Python27;C:\Python27\Scripts;C:\Program Files\TortoiseGit\bin;C:\Program Files (x86)\Skype\Phone\;C:\Program Files (x86)\CheckPoint\Endpoint Security\Endpoint Common\bin;C:\Program Files (x86)\Sennheiser\SoftphoneSDK\;D:\apps\Jython2.5.3;C:\Python27\scripts;C:\Python27;C:\Program Files\Java\jdk1.7.0_79\bin;C:\Program Files\Java\jdk1.7.0_79\bin;C:\ProgramData\Oracle\Java\;D:\Hackathon;C:\Program Files\Docker Toolbox;C:\Users\anksaxen\AppData\Local\Programs\Fiddler;D:\userdata\anksaxen\Application Data\npm
			
			C:\ProgramData\Oracle\Java\javapath;C:\APPS\maven3\bin;C:\APPS\yourkit_10.0.6;C:\APPS\notepad++;C:\Program Files (x86)\RSA SecurID Token Common;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;C:\APPS\ant\bin;C:\APPS\xmlspy\XMLSpy2013;C:\APPS\7zip;C:\APPS\bc;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\WebEx\Productivity Tools;C:\Program Files (x86)\SafeCom\SafeComPrintClient;C:\Python27;C:\Python27\Scripts;C:\Program Files\TortoiseGit\bin;C:\Program Files (x86)\Skype\Phone\;C:\Program Files (x86)\CheckPoint\Endpoint Security\Endpoint Common\bin;%ZOOKEEPER_HOME%\bin;C:\Program Files\PuTTY\;C:\Program Files\nodejs\;C:\Program Files (x86)\Sennheiser\SoftphoneSDK\
			
			
Step 4	: open RUn and run cmd and run the following command 
		 C:\Users\anksaxen>minikube start 
		 
		 D:\Hackathon
		 
Step 5	: Faile set proxy 
			set HTTP_PROXY=http://10.158.100.2:8080
			set HTTPS_PROXY=http://10.158.100.2:8080
			set NO_PROXY=192.168.99.100,192.168.99.0/24,10.0.0.0/8
		
		Neo:	
		set HTTP_PROXY = "http://10.144.1.10:8080"
		set HTTPS_PROXY = "http://10.144.1.10:8080"
		set NO_PROXY = "localhost,127.0.0.1,192.168.0.0/16"
			
Step 6	: https://kubernetes.io/docs/tasks/tools/install-kubectl/

		  kubectl.exe download the exe and put the same folder D:\Hackathon;

		  
 minikube start  set HTTP_PROXY=http://10.158.100.2:8080 HTTPS_PROXY=http://10.158.100.2:8080 NO_PROXY=192.168.99.100,192.168.99.0/24,10.0.0.0/8
////////////////


1.	VT-x or AMD-v virtualization must be enabled in your computer’s BIOS
•	Go to IT desk on 5th floor and request to enable VT-x in computer's BIOS
2.	Install Hypervisor
•	install Oracle VirtualBox : https://www.virtualbox.org/wiki/Downloads
Ø	VirtualBox 5.2.2 platform packages
3.	Create a folder to store the exe’s for kubectl, minikube
•	For example: D:\Tools\Extract\kubernetes 
•	Update your Path environment variable with above path(D:\Tools\Extract\kubernetes)(above)
4.	Install kubectl : https://kubernetes.io/docs/tasks/tools/install-kubectl/
•	Click on “Windows” tab and click on link  “Download the latest release v1.8.0 from this link.”
•	Put kubectl.exe in the folder (D:\Tools\Extract\kubernetes)
5.	Install Minikube: https://github.com/kubernetes/minikube/releases
•	Download version v0.24.1
•	Rename the minikube-windows-amd64.exe file to minikube.exe
•	Put minikube.exe in the folder (D:\Tools\Extract\kubernetes)
6.	Run the below commands
	SET HTTP_PROXY=http://10.158.100.2:8080
    SET HTTPS_PROXY=http://10.158.100.2:8080
	SET NO_PROXY=192.168.99.100,192.168.99.0/24,10.0.0.0/8
•	minikube config set vm-driver virtualbox
•	minikube start --docker-env http_proxy=http://10.158.100.2:8080 --docker-env https_proxy=http://10.158.100.2:8080 --docker-env no_proxy=192.168.99.0/24,10.0.0.0/8
7.	Check if the dashboard is accessible by running
•	minikube dashboard
8.	Explore kubectl by executing the below commands
•	kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080
•	kubectl expose deployment hello-minikube --type=NodePort
•	kubectl get pod
•	minikube service hello-minikube –url
9.	You can invoke the service in the below 2 ways
•	Directly in browser: with url output of last command of step 8
Or run below command if curl is installed
•	curl < url output of last command of step 8>

minikube config set vm-driver virtualbox
kubectl get services --all-namespaces


///////////////////////////////////////////
Task : creting jar(sprinbootapp) and run on docker-env

1) For creting the image in docker need to run follwing command (any plave u can run it)

Study the how to 

minikube start --docker-env http_proxy=http://10.158.100.2:8080 --docker-env https_proxy=http://10.158.100.2:8080 --docker-env no_proxy=192.168.99.0/24,10.0.0.0/8


Creating docker image out of the artifacts:
open at docker file level window and run "minikube docker-env"


SET DOCKER_TLS_VERIFY=1
SET DOCKER_HOST=tcp://192.168.99.100:2376
SET DOCKER_CERT_PATH=C:\Users\anksaxen\.minikube\certs
SET DOCKER_API_VERSION=1.23
REM Run this command to configure your shell:
REM @FOR /f "tokens=*" %i IN ('minikube docker-env') DO @%i



docker build -t imagename:v1 
docker build -t producerconsumer:v1.






/////////////
minikube stop
minikube delete

minikube error while starting : E0410 17:25:33.658777   97396 start.go:150] Error starting host: Error getting state for host: machine does not exist.

set DOCKER_TLS_VERIFY=1
set DOCKER_HOST=tcp://192.168.99.101:2376
set DOCKER_CERT_PATH=C:\Tools\Extract\kubernetes\.minikube\certs
set DOCKER_API_VERSION=1.23




registry=https://registry.npmjs.org/
@nokia-csf-uxr:registry=https://repo.lab.pl.alcatel-lucent.com/api/npm/csf-npm-delivered
strict-ssl=false
cache-min=1209600
loglevel=warn
proxy=http://10.144.1.10:8080/
https-proxy=http://10.144.1.10:8080/


#registry=https://registry.npmjs.org/
registry=https://repo.lab.pl.alcatel-lucent.com/api/npm/npm-remote
@nokia-csf-uxr:registry=https://repo.lab.pl.alcatel-lucent.com/api/npm/csf-npm-delivered
strict-ssl=false
cache-min=1209600
loglevel=warn
proxy=http://10.144.1.10:8080/
https-proxy=http://10.144.1.10:8080/



////////////////////////////////////////////////////



•	Design, implement and maintain messaging ecosystem based on open source kafka using various deployment modes including standalone and K8S, following agile methodology.
•	Design, implement distributed data processing pipelines along with performance tuning of data pipelines using Kafka, Spark, Flink, Hive and other big data tools. 
•	Expertise in one or more programming/scripting env. like Java/J2EE, Python,  Ansible.
•	Exposure to Devops – Experience of development in a Jenkins based environment
•	Expertise in container management environment such as K8S. Experience with dockers,  HELM charts
•	Desirable to have demonstrated open source contributions/penchant for open source contributions, awareness on licensing, security & compliance aspects. 
•	Job also involves carrying out functional & system tests, software validation/reviews and technical support during platform deployment & product integrations.
•	Good debugging and Analytical Skills are needed.
•	Excellent communication skills, both verbal & written desired.





kafka
Kafka, Spark, Flink, Hive and other big data tools
container management environment such as K8S. Experience with dockers,  HELM charts



Docker is a tool designed to make it easier to create, deploy, and run applications by using containers

Apache Kafka is the most popular distributed messaging and streaming data platform
Apache Kafka isan open source,distributed,publish-subscribe messaging system which manages and maintains the real time stream of data from different applications, websites, etc.
 It enables communication between producers and consumers using message based topics. It designs a platform for high-end new generation distributed applications.
 Kafka permits a large number of permanent or ad-hoc consumers.







